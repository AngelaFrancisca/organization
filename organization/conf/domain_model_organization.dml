/** package module.organization.domain; **/

valueType org.joda.time.DateTime as DateTime;
valueType org.joda.time.LocalDate as LocalDate;

valueType pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString as MultiLanguageString;

enum module.organization.domain.person.IDDocumentType as IDDocumentType;
enum module.organization.domain.person.Gender as Gender;
enum module.organization.domain.person.MaritalStatus as MaritalStatus;

class module.organization.domain.AccountabilityType {
	String ojbConcreteClass;
	String type;
	MultiLanguageString name;
}

	class module.organization.domain.ConnectionRuleAccountabilityType extends module.organization.domain.AccountabilityType {
	}

class module.organization.domain.Accountability {
	LocalDate beginDate;
	LocalDate endDate;
}

class module.organization.domain.PartyType {
	String type;
	MultiLanguageString name;
}

class module.organization.domain.Party {
	String ojbConcreteClass;
	MultiLanguageString partyName;
}

	class module.organization.domain.Person extends module.organization.domain.Party {
		String documentIdNumber;
		IDDocumentType idDocumentType;
		LocalDate emissionDateOfDocumentId;
		LocalDate expirationDateOfDocumentId;
		String emissionLocationOfDocumentId;

		String fiscalCode;
				
		Gender gender;
		MaritalStatus maritalStatus;

		LocalDate birthDate;
		String birthDistrict;
		String birthDistrictSubdivision;
		String birthParish;
		
		String fathersName;
		String mothersName;
		
		// Add to relation
    	//private DomainReference<Country> nationality;
    	//private DomainReference<Country> countryOfBirth;
	}

	class module.organization.domain.Unit extends module.organization.domain.Party {
		String acronym;
	}

class module.organization.domain.ConnectionRule {
}

/** Relations **/

relation UserPerson {
	myorg.domain.User playsRole user;
	module.organization.domain.Person playsRole person;
}

relation MyOrgAccountabilityType {
	myorg.domain.MyOrg playsRole myOrg;
	module.organization.domain.AccountabilityType playsRole accountabilityTypes {
		multiplicity *;
	}
}

relation MyOrgAccountability {
	myorg.domain.MyOrg playsRole myOrg;
	module.organization.domain.Accountability playsRole accountabilities {
		multiplicity *;
	}
}

relation MyOrgPartyType {
	myorg.domain.MyOrg playsRole myOrg;
	module.organization.domain.PartyType playsRole partyTypes {
		multiplicity *;
	}
}

relation AccountabilityAccountabilityType {
	module.organization.domain.Accountability playsRole accountabilities {
		multiplicity *;
	}
	module.organization.domain.AccountabilityType playsRole accountabilityType;
}

relation MyOrgParty {
	myorg.domain.MyOrg playsRole myOrg;
	module.organization.domain.Party playsRole parties {
		multiplicity *;
	}
}

relation MyOrgTopUnit {
	myorg.domain.MyOrg playsRole myOrgFromTopUnit;
	module.organization.domain.Unit playsRole topUnits {
		multiplicity *;
	}
}

relation PartyTypeParty {
	module.organization.domain.PartyType playsRole partyType;
	module.organization.domain.Party playsRole parties {
		multiplicity *;
	}
}

relation PartyParentAccountabilities {
	module.organization.domain.Party playsRole child;
	module.organization.domain.Accountability playsRole parentAccountabilities {
		multiplicity *;
	}
}

relation PartyChildAccountabilities {
	module.organization.domain.Party playsRole parent;
	module.organization.domain.Accountability playsRole childAccountabilities {
		multiplicity *;
	}
}

relation ConnectionRuleParentPartyType {
	module.organization.domain.PartyType playsRole allowedParent;
	module.organization.domain.ConnectionRule playsRole childConnectionRules {
		multiplicity *;
	}
}

relation ConnectionRuleChildPartyType {
	module.organization.domain.PartyType playsRole allowedChild;
	module.organization.domain.ConnectionRule playsRole parentConnectionRules {
		multiplicity *;
	}
}

relation ConnectionRuleConnectionRuleAccountabilityType {
	module.organization.domain.ConnectionRuleAccountabilityType playsRole accountabilityType;
	module.organization.domain.ConnectionRule playsRole connectionRules {
		multiplicity *;
	}
}

relation MyOrgConnectionRule {
	myorg.domain.MyOrg playsRole myOrg;
	module.organization.domain.ConnectionRule playsRole connectionRules {
		multiplicity *;
	}
}
